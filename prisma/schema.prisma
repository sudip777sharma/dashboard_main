generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid()) @map("_id")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(cuid()) @map("_id")
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    enrolledCourses EnrolledCourse[]
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model VisData {
    id         String   @id @default(cuid()) @map("_id")
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    end_year   Int
    intensity  Int
    sector     String
    topic      String
    insight    String
    url        String
    region     String
    start_year Int
    impact     Int
    added      String
    published  String
    country    String
    relevance  Int
    pestle     String
    source     String
    title      String
    likelihood Int
}

model EnrolledCourse {
    id        String   @id @default(cuid()) @map("_id")
    userId    String
    courseId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

    @@unique([userId, courseId])
}

model Course {
    id               String           @id @default(cuid()) @map("_id")
    name             String
    instructor       String
    description      String
    enrollmentStatus String
    thumbnail        String
    duration         String
    schedule         String
    location         String
    prerequisites    String[]
    syllabus         Syllabus[]
    enrolledUsers    EnrolledCourse[]
}

model Syllabus {
    id       String @id @default(cuid()) @map("_id")
    week     Int
    topic    String
    content  String
    courseId String
    course   Course @relation(fields: [courseId], references: [id])
}
